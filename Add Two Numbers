You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

Solution using C++ :
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head=NULL;
        ListNode *cur;
        ListNode *temp;
        int carry=0;
        while(l1 || l2 || carry){
            int x=0;
            if(l1){
                x+=l1->val;
                l1=l1->next;
            }
            if(l2){
                x+=l2->val;
                l2=l2->next;
            }
            if(carry){
                x+=carry;
                carry=0;
            }
            if(x<=9){
                cur=new ListNode(x);
            }
            else{
                cur=new ListNode(x%10);
                carry=x/10;
            }
            if(head==NULL){
                head=cur;
                temp=cur;
            }
            else{
                temp->next=cur;
                temp=cur;
            }
        }
        /*if(carry)
            temp->next=new ListNode(carry);*/
        return head;
    }
};



Solution usinh JAVA :
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=null;
        ListNode cur;
        ListNode temp=null;
        int carry=0;
        while(l1!=null || l2!=null || carry!=0){
            int x=0;
            if(l1!=null){
                x+=l1.val;
                l1=l1.next;
            }
            if(l2!=null){
                x+=l2.val;
                l2=l2.next;
            }
            if(carry!=0){
                x+=carry;
                carry=0;
            }
            if(x<=9){
                cur=new ListNode(x);
            }
            else{
                cur=new ListNode(x%10);
                carry=x/10;
            }
            if(head==null){
                head=cur;
                temp=cur;
            }
            else{
                temp.next=cur;
                temp=cur;
            }
        }
        return head;
    }
}
