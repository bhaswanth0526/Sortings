Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.



Solution using C++ :
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int maxi=0;
        for(int i=0;i<s.length();i++){
            int a[256]={0};
            int j=i;
            int cnt=0;
            while(j<s.length() && a[s[j]]==0){
                cnt++;
                a[s[j]]=1;
                j++;
            }
            maxi=max(maxi,cnt);
        }
        return maxi;
    }
};
