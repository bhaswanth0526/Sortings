Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

Solution using C++:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> m;
        for(auto i:nums) m[i]++;
        vector<int> v;
        int i;
        int flag=0;
        for(i=0;i<nums.size();i++)
            if(m[target-nums[i]]>0 && target-nums[i]!=nums[i]){
                v.push_back(i);
                flag=1;
                break;
            }
        if(flag==0)
            for(i=0;i<nums.size();i++)
            if(m[target-nums[i]]>0){
                v.push_back(i);
                break;
            }
        int y=i;
        int x=target-nums[i];
        for(i=0;i<nums.size();i++)
            if(x==nums[i] && y!=i){
                v.push_back(i);
                break;
            }
        return v;
    }
};

Solution using Python :

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        vr={}
        for temp,num in enumerate(nums):
            if target-num in vr:
                return vr[target-num],temp
            vr[num]=temp
